#!/usr/bin/env python3

import fire
import subprocess
import os
import shutil

def run_with_checks(command, verbose = False):
        process = subprocess.run(command, check=True, capture_output=True)
        if process.returncode != 0:
            print(f"Process returned {process.returncode}")
            print(f"stdout:\n{process.stdout.decode()}")
            print(f"stderr:\n{process.stderr.decode()}")
        elif verbose:
            print(f"stdout:\n{process.stdout.decode()}")
        return process

def is_mount_point(directory):
    # Get the device ID of the directory
    dir_stat = os.stat(directory)
    dir_device = dir_stat.st_dev

    # Get the device ID of the parent directory
    parent_directory = os.path.dirname(directory)
    parent_stat = os.stat(parent_directory)
    parent_device = parent_stat.st_dev

    # Compare the device IDs to check if the directory is a mount point
    return dir_device != parent_device

class Command:
    def create_disk(self, size, verbose = False):
        if not os.path.exists("disk.qcow2"): 
            print(f"Creating disk.qcow2 with size {size}GiB")
            run_with_checks(["qemu-img", "create", 
                             "-f", "qcow2", "disk.qcow2", f"{size}G"], 
                            verbose)
            return True
        else:
            print("Disk already exists")
            return False

    def copy(self, user = "ambix", verbose = False):
        try: # ensure the mountpoint exists
            os.mkdir("./mount")
        except:
            pass
        if not is_mount_point("./mount"):
            # mount sshfs
            run_with_checks([
                "sshfs",
                f"{user}@localhost:/home/{user}",
                "mount",
                "-p", "10022"
                ], verbose)


        # copy ambix
        shutil.copytree("../src", "./mount/ambix")

    def run(self, image_path = None, disk_size = 25, verbose = False):
        if self.create_disk(disk_size, verbose):
            assert image_path is not None
            # TODO able to simulate heterogeneous memory
            run_with_checks([
                "qemu-system-x86_64",
                "-enable-kvm",
                "-m", "4G",
                "-object", "memory-backend-ram,size=2G,id=m0",
                "-object", "memory-backend-ram,size=2G,id=m1",
                "-smp", "cpus=4",
                "-numa", "node,cpus=0-1,nodeid=0,memdev=m0",
                "-numa", "node,cpus=2-3,nodeid=1,memdev=m1",
                "-hda", "disk.qcow2",
                "-boot", "d",
                "-cdrom", image_path,
                "-netdev", "user,id=net0",
                "-device", "virtio-net-pci,netdev=net0",
                ], verbose)

        else:
            try: # by default run this, it's headless and forwards localhost:10022 to vm:22 so ssh is usable
                run_with_checks([
                    "qemu-system-x86_64",
                    "-enable-kvm",
                    "-m", "4G",
                    "-object", "memory-backend-ram,size=2G,id=m0",
                    "-object", "memory-backend-ram,size=2G,id=m1",
                    "-smp", "cpus=4",
                    "-numa", "node,cpus=0-1,nodeid=0,memdev=m0",
                    "-numa", "node,cpus=2-3,nodeid=1,memdev=m1",
                    "-hda", "disk.qcow2",
                    "-netdev", "user,id=net0",
                    "-device", "virtio-net-pci,netdev=net0",
                    "-net", "nic",
                    "-net", "user,hostfwd=tcp:127.0.0.1:10022-:22",
                    "-nographic"
                    ], verbose)

            except: # if the port forwarding fails, run this, also might run on the first
                # time after installing the image
                run_with_checks([
                    "qemu-system-x86_64",
                    "-enable-kvm",
                    "-m", "4G",
                    "-object", "memory-backend-ram,size=2G,id=m0",
                    "-object", "memory-backend-ram,size=2G,id=m1",
                    "-smp", "cpus=4",
                    "-numa", "node,cpus=0-1,nodeid=0,memdev=m0",
                    "-numa", "node,cpus=2-3,nodeid=1,memdev=m1",
                    "-hda", "disk.qcow2",
                    "-netdev", "user,id=net0",
                    ], verbose)

if __name__ == "__main__":
    fire.Fire(Command)
