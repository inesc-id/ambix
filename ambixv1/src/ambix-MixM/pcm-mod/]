/*

   Copyright (c) 2009-2020, Intel Corporation
   All rights reserved.

   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Intel Corporation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// written by Patrick Lu
// increased max sockets to 256 - Thomas Willhalm


/*!     \file pcm-memory.cpp
  \brief Example of using CPU counters: implements a performance counter monitoring utility for memory controller channels and DIMMs (ranks) + PMM memory traffic
  */
#include <iostream>
#include <unistd.h>
#include <signal.h>
#include <sys/time.h> // for gettimeofday()
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <string>
#include <assert.h>
#include "cpucounters.h"
#include "utils.h"

#define PCM_DELAY_DEFAULT 1.0 // in seconds
#define PCM_DELAY_MIN 0.015 // 15 milliseconds is practical on most modern CPUs
#define PCM_CALIBRATION_INTERVAL 50 // calibrate clock only every 50th iteration

#define DEFAULT_DISPLAY_COLUMNS 2

using namespace std;
using namespace pcm;

const uint32 max_sockets = 2;
uint32 max_imc_channels = ServerUncoreCounterState::maxChannels;
const uint32 max_edc_channels = ServerUncoreCounterState::maxChannels;
const uint32 max_imc_controllers = ServerUncoreCounterState::maxControllers;

typedef struct memdata {
    float iMC_Rd_socket[max_sockets];
    float iMC_Wr_socket[max_sockets];
    float iMC_PMM_Rd_socket[max_sockets];
    float iMC_PMM_Wr_socket[max_sockets];
} memdata_t;

typedef struct bwdata {
    float dramReads;
    float pmmReads;
    float dramWrites;
    float pmmWrites;
} bwdata_t;

PCM *m = PCM::getInstance();
uint32 numSockets;
ServerUncoreCounterState * BeforeState;
ServerUncoreCounterState * AfterState;
uint32 BeforeTime;
uint32 AfterTime;

bool skipInactiveChannels = true;

void print_help(const string prog_name)
{
    cerr << "\n Usage: \n " << prog_name
         << " --help | [delay] [options] [-- external_program [external_program_options]]\n";
    cerr << "   <delay>                           => time interval to sample performance counters.\n";
    cerr << "                                        If not specified, or 0, with external program given\n";
    cerr << "                                        will read counters only after external program finishes\n";
    cerr << " Supported <options> are: \n";
    cerr << "  -h    | --help  | /h               => print this help and exit\n";
    cerr << " Examples:\n";
    cerr << "  " << prog_name << " 1                  => print counters every second without core and socket output\n";
    cerr << "\n";
}

void display_bandwidth(memdata_t *md, uint32 system, uint32 skt)
{
    float sysReadDRAM = 0.0, sysWriteDRAM = 0.0, sysReadPMM = 0.0, sysWritePMM = 0.0;
    cout.setf(ios::fixed);
    cout.precision(2);

    string id;

    if (system) {
        for (uint32 i = 0; i < numSockets; i++)
        {
            sysReadDRAM += md->iMC_Rd_socket[i];
            sysWriteDRAM += md->iMC_Wr_socket[i];
            sysReadPMM += md->iMC_PMM_Rd_socket[i];
            sysWritePMM += md->iMC_PMM_Wr_socket[i];
        }
        id = "System ";
    }
    else {
        sysReadDRAM += md->iMC_Rd_socket[skt];
        sysWriteDRAM += md->iMC_Wr_socket[skt];
        sysReadPMM += md->iMC_PMM_Rd_socket[skt];
        sysWritePMM += md->iMC_PMM_Wr_socket[skt];
        id = "Socket " + to_string(skt);
    }



    cout << "\
        \r|---------------------------------|  " << setw(8) << id << "  |---------------------------------|\n";
    cout << "\
        \r|--                   DRAM Read Throughput(MB/s):" << setw(14) << sysReadDRAM <<                                     "                --|\n\
        \r|--                  DRAM Write Throughput(MB/s):" << setw(14) << sysWriteDRAM <<                                    "                --|\n\
        \r|--                    PMM Read Throughput(MB/s):" << setw(14) << sysReadPMM <<                                      "                --|\n\
        \r|--                   PMM Write Throughput(MB/s):" << setw(14) << sysWritePMM <<                                     "                --|\n";
    cout << "\
        \r|--                        Read Throughput(MB/s):" << setw(14) << sysReadDRAM+sysReadPMM <<                          "                --|\n\
        \r|--                       Write Throughput(MB/s):" << setw(14) << sysWriteDRAM+sysWritePMM <<                        "                --|\n\
        \r|--                      Memory Throughput(MB/s):" << setw(14) << sysReadDRAM+sysReadPMM+sysWriteDRAM+sysWritePMM << "                --|\n\
        \r|---------------------------------------||---------------------------------------|\n";
}


memdata_t calculate_bandwidth(PCM *m, const ServerUncoreCounterState uncState1[], const ServerUncoreCounterState uncState2[], const uint64 elapsedTime, uint32 system, uint32 socket)
{
    //const uint32 num_imc_channels = m->getMCChannelsPerSocket();
    //const uint32 num_edc_channels = m->getEDCChannelsPerSocket();
    memdata_t md;
    uint32 skt = 0;

    if (!system) skt = socket;
    for(; (!system && (skt == socket)) || (skt < numSockets); ++skt)
    {
        md.iMC_Rd_socket[skt] = 0.0;
        md.iMC_Wr_socket[skt] = 0.0;
        md.iMC_PMM_Rd_socket[skt] = 0.0;
        md.iMC_PMM_Wr_socket[skt] = 0.0;

		auto toBW = [&elapsedTime](const uint64 nEvents)
		{
			return (float)(nEvents * 64 / 1000000.0 / (elapsedTime / 1000.0));
		};
        for (uint32 channel = 0; channel < max_imc_channels; ++channel)
        {
            uint64 reads = 0, writes = 0, pmmReads = 0, pmmWrites = 0;
            reads = getMCCounter(channel, ServerPCICFGUncore::EventPosition::READ, uncState1[skt], uncState2[skt]);
            writes = getMCCounter(channel, ServerPCICFGUncore::EventPosition::WRITE, uncState1[skt], uncState2[skt]);
            pmmReads = getMCCounter(channel, ServerPCICFGUncore::EventPosition::PMM_READ, uncState1[skt], uncState2[skt]);
            pmmWrites = getMCCounter(channel, ServerPCICFGUncore::EventPosition::PMM_WRITE, uncState1[skt], uncState2[skt]);
            if ((reads + writes + pmmReads + pmmWrites) == 0)
            {
                continue;
            }

            md.iMC_Rd_socket[skt] += toBW(reads);
            md.iMC_Wr_socket[skt] += toBW(writes);

            md.iMC_PMM_Rd_socket[skt] += toBW(pmmReads);
            md.iMC_PMM_Wr_socket[skt] += toBW(pmmWrites);

        }
    }

    return md;
    //display_bandwidth(m, &md, system, socket);
}

bwdata_t md_to_bd(memdata_t *md, uint32 system, uint32 socket) {

}

bwdata_t pnp_integration(int system, int skt) {
    AfterTime = m->getTickCount();
    for(uint32 i=0; i<numSockets; ++i)
        AfterState[i] = m->getServerUncoreCounterState(i);

    memdata_t md = calculate_bandwidth(m,BeforeState,AfterState,AfterTime-BeforeTime, system, skt);


    swap(BeforeTime, AfterTime);
    swap(BeforeState, AfterState);

    return md_to_bd(&md);
}

int extern_init() {
    set_signal_handlers();

    m->disableJKTWorkaround();
    if (!m->hasPCICFGUncore())
    {
        cerr << "Unsupported processor model (" << m->getCPUModel() << ").\n";
        if (m->memoryTrafficMetricsAvailable())
            cerr << "For processor-level memory bandwidth statistics please use pcm.x\n";
        return -1;
    }
    if ((m->PMMTrafficMetricsAvailable()) == false)
    {
        cerr << "PMM traffic metrics are not available on your processor.\n";
        return -1;
    }
    PCM::ErrorCode status = m->programServerUncoreMemoryMetrics(-1, -1, true, true);
    switch (status)
    {
        case PCM::Success:
            break;
        case PCM::MSRAccessDenied:
            cerr << "Access to Processor Counter Monitor has denied (no MSR or PCI CFG space access).\n";
            return -1;
        case PCM::PMUBusy:
            cerr << "Access to Processor Counter Monitor has denied (Performance Monitoring Unit is occupied by other application). Try to stop the application that uses PMU.\n";
            cerr << "Alternatively you can try to reset PMU configuration at your own risk. Try to reset? (y/n)\n";
            char yn;
            cin >> yn;
            if ('y' == yn)
            {
                m->resetPMU();
                cerr << "PMU configuration has been reset. Try to rerun the program again.\n";
            }
            return -1;
        default:
            cerr << "Access to Processor Counter Monitor has denied (Unknown error).\n";
            return -1;
    }

    numSockets = m->getNumSockets();
    if(numSockets > max_sockets)
    {
        cerr << "Only systems with up to " << max_sockets << " sockets are supported! Program aborted\n";
        return -1;
    }

    max_imc_channels = m->getMCChannelsPerSocket();

    BeforeState = new ServerUncoreCounterState[numSockets];
    AfterState = new ServerUncoreCounterState[numSockets];
    BeforeTime = 0;
    AfterTime = 0;

    m->setBlocked(false);

    for(uint32 i=0; i<numSockets; ++i)
        BeforeState[i] = m->getServerUncoreCounterState(i);

    BeforeTime = m->getTickCount();

    return 0;
}

int extern_exit() {
    delete[] BeforeState;
    delete[] AfterState;

    return 0;
}

int main(int argc, char * argv[])
{
    set_signal_handlers();

#ifdef PCM_FORCE_SILENT
    null_stream nullStream1, nullStream2;
    cout.rdbuf(&nullStream1);
    cerr.rdbuf(&nullStream2);
#endif

    cerr << "\n";
    cerr << " Processor Counter Monitor: Memory Bandwidth Monitoring Utility " << PCM_VERSION << "\n";
    cerr << "\n";

    cerr << " This utility measures memory bandwidth per channel or per DIMM rank in real-time\n";
    cerr << "\n";

    double delay = 1.0;
    long diff_usec = 0; // deviation of clock is useconds between measurements
    int calibrated = PCM_CALIBRATION_INTERVAL - 2; // keeps track is the clock calibration needed
    unsigned int numberOfIterations = 0; // number of iterations

    uint32 system = 1;
    uint32 skt = 0;

    string program = string(argv[0]);


    if (argc > 1) do
    {
        argv++;
        argc--;
        if (strncmp(*argv, "--help", 6) == 0 ||
            strncmp(*argv, "-h", 2) == 0 ||
            strncmp(*argv, "/h", 2) == 0)
        {
            print_help(program);
            exit(EXIT_FAILURE);
        }
	    else if (strncmp(*argv, "-i", 2) == 0 ||
            strncmp(*argv, "/i", 2) == 0)
        {
            string cmd = string(*argv);
            size_t found = cmd.find('=', 2);
            if (found != string::npos) {
                string tmp = cmd.substr(found + 1);
                if (!tmp.empty()) {
                    numberOfIterations = (unsigned int)atoi(tmp.c_str());
                }
            }
            continue;
        }
        else if (strncmp(*argv, "-s", 2) == 0 ||
            strncmp(*argv, "/s", 2) == 0)
        {
            string cmd = string(*argv);
            size_t found = cmd.find('=',2);
            if (found != string::npos) {
                string tmp = cmd.substr(found + 1);
                if (!tmp.empty()) {
                    skt = (unsigned int)atoi(tmp.c_str());
                }
            }
            system = 0;
            continue;
        }
        else
        {
            // any other options positional that is a floating point number is treated as <delay>,
            // while the other options are ignored with a warning issues to stderr
            double delay_input;
            istringstream is_str_stream(*argv);
            is_str_stream >> noskipws >> delay_input;
            if(is_str_stream.eof() && !is_str_stream.fail()) {
                delay = delay_input;
            } else {
                cerr << "WARNING: unknown command-line option: \"" << *argv << "\". Ignoring it.\n";
                print_help(program);
                exit(EXIT_FAILURE);
            }
            continue;
        }
    } while(argc > 1); // end of command line partsing loop

    printf("%d\n", skt);

    m->disableJKTWorkaround();
    print_cpu_details();
    if (!m->hasPCICFGUncore())
    {
        cerr << "Unsupported processor model (" << m->getCPUModel() << ").\n";
        if (m->memoryTrafficMetricsAvailable())
            cerr << "For processor-level memory bandwidth statistics please use pcm.x\n";
        exit(EXIT_FAILURE);
    }
    if ((m->PMMTrafficMetricsAvailable()) == false)
    {
        cerr << "PMM traffic metrics are not available on your processor.\n";
        exit(EXIT_FAILURE);
    }
    PCM::ErrorCode status = m->programServerUncoreMemoryMetrics(-1, -1, true, true);
    switch (status)
    {
        case PCM::Success:
            break;
        case PCM::MSRAccessDenied:
            cerr << "Access to Processor Counter Monitor has denied (no MSR or PCI CFG space access).\n";
            exit(EXIT_FAILURE);
        case PCM::PMUBusy:
            cerr << "Access to Processor Counter Monitor has denied (Performance Monitoring Unit is occupied by other application). Try to stop the application that uses PMU.\n";
            cerr << "Alternatively you can try to reset PMU configuration at your own risk. Try to reset? (y/n)\n";
            char yn;
            cin >> yn;
            if ('y' == yn)
            {
                m->resetPMU();
                cerr << "PMU configuration has been reset. Try to rerun the program again.\n";
            }
            exit(EXIT_FAILURE);
        default:
            cerr << "Access to Processor Counter Monitor has denied (Unknown error).\n";
            exit(EXIT_FAILURE);
    }

    numSockets = m->getNumSockets();
    if(numSockets > max_sockets)
    {
        cerr << "Only systems with up to " << max_sockets << " sockets are supported! Program aborted\n";
        exit(EXIT_FAILURE);
    }

    max_imc_channels = m->getMCChannelsPerSocket();

    BeforeState = new ServerUncoreCounterState[numSockets];
    AfterState = new ServerUncoreCounterState[numSockets];
    BeforeTime = 0;
    AfterTime = 0;

    if (delay<=0.0) {
        // delay either not provided (-1) or is zero
        m->setBlocked(true);
    } else {
        m->setBlocked(false);
    }

    cerr << "Update every " << delay << " seconds\n";

    for(uint32 i=0; i<numSockets; ++i)
        BeforeState[i] = m->getServerUncoreCounterState(i);

    BeforeTime = m->getTickCount();

    unsigned int i = 1;

    while ((i <= numberOfIterations) || (numberOfIterations == 0))
    {
        int delay_ms = int(delay * 1000);
        int calibrated_delay_ms = delay_ms;
        // compensation of delay on Linux/UNIX
        // to make the samling interval as monotone as possible
        struct timeval start_ts, end_ts;
        if(calibrated == 0) {
            gettimeofday(&end_ts, NULL);
            diff_usec = (end_ts.tv_sec-start_ts.tv_sec)*1000000.0+(end_ts.tv_usec-start_ts.tv_usec);
            calibrated_delay_ms = delay_ms - diff_usec/1000.0;
        }
        MySleepMs(calibrated_delay_ms);


        AfterTime = m->getTickCount();
        for(uint32 i=0; i<numSockets; ++i)
            AfterState[i] = m->getServerUncoreCounterState(i);

        memdata_t md = calculate_bandwidth(m,BeforeState,AfterState,AfterTime-BeforeTime, system, skt);
        display_bandwidth(md_to_bd(&md, system, skt), system, skt);

        swap(BeforeTime, AfterTime);
        swap(BeforeState, AfterState);

        if ( m->isBlocked() ) {
        // in case PCM was blocked after spawning child application: break monitoring loop here
            break;
        }
        ++i;
    }

    delete[] BeforeState;
    delete[] AfterState;

    exit(EXIT_SUCCESS);
}
